---
// CustomJourneysForm.astro - Formulario de viajes personalizados
import { 
  worldRegions, 
  countries, 
  tripTypes, 
  holidayExperiences, 
  travelDateOptions, 
  nightsOptions, 
  currencyOptions, 
  budgetRanges, 
  specialOccasions, 
  luxuryServices, 
  travelingWith, 
  howDidYouHear, 
  countriesOfResidence 
} from '../data/customJourneysData.js';
import FormField from './form/FormField.astro';

// Definición de campos del formulario
const formFields = {
  // About the Trip
  destination: {
    id: 'destination',
    name: 'destination',
    type: 'select',
    label: 'Which destination would you like to explore on your next trip?',
    required: true,
    choices: worldRegions,
    width: '50'
  },
  specificCountry: {
    id: 'specific-country',
    name: 'specificCountry',
    type: 'select',
    label: 'Specific Country',
    required: false,
    choices: countries,
    width: '50'
  },
  secondaryDestination: {
    id: 'secondary-destination',
    name: 'secondaryDestination',
    type: 'select',
    label: 'Do you have a secondary destination in mind?',
    required: false,
    choices: worldRegions,
    width: '50'
  },
  secondarySpecificCountry: {
    id: 'secondary-specific-country',
    name: 'secondarySpecificCountry',
    type: 'select',
    label: 'Secondary Specific Country',
    required: false,
    choices: countries,
    width: '50'
  },
  tripType: {
    id: 'trip-type',
    name: 'tripType',
    type: 'button_group',
    label: 'What type of trip are you planning?',
    required: false,
    choices: tripTypes,
    width: '100'
  },
  holidayExperience: {
    id: 'holiday-experience',
    name: 'holidayExperience',
    type: 'button_group',
    label: 'What type of holiday experience would you like?',
    required: false,
    choices: holidayExperiences,
    width: '100',
    buttonClass: 'holiday-experience-btn'
  },
  travelDates: {
    id: 'travel-dates',
    name: 'travelDates',
    type: 'select',
    label: 'Do you have specific travel dates?',
    required: false,
    choices: travelDateOptions,
    width: '100'
  },
  startDate: {
    id: 'start-date',
    name: 'startDate',
    type: 'date',
    label: 'Start Date',
    required: false,
    width: '50'
  },
  returnDate: {
    id: 'return-date',
    name: 'returnDate',
    type: 'date',
    label: 'Return Date',
    required: false,
    width: '50'
  },
  nights: {
    id: 'nights',
    name: 'nights',
    type: 'select',
    label: 'How many nights do you plan to travel?',
    required: false,
    choices: nightsOptions,
    width: '100'
  },
  currency: {
    id: 'currency',
    name: 'currency',
    type: 'select',
    label: 'Currency',
    required: false,
    choices: currencyOptions,
    width: '50'
  },
  budgetAmount: {
    id: 'budget-amount',
    name: 'budgetAmount',
    type: 'select',
    label: 'Budget Amount',
    required: false,
    choices: budgetRanges,
    width: '50'
  },
  budgetDetails: {
    id: 'budget-details',
    name: 'budgetDetails',
    type: 'text',
    label: 'Additional budget details (optional)',
    required: false,
    placeholder: 'Please specify your budget details...',
    width: '50'
  },
  specialOccasion: {
    id: 'special-occasion',
    name: 'specialOccasion',
    type: 'select',
    label: 'Are you celebrating a special occasion?',
    required: false,
    choices: specialOccasions,
    width: '50'
  },
  luxuryServices: {
    id: 'luxury-services',
    name: 'luxuryServices',
    type: 'checkbox_group',
    label: 'Do you require any additional luxury services? (Select all that apply)',
    required: false,
    choices: luxuryServices,
    width: '100'
  },
  luxuryServicesOther: {
    id: 'luxury-services-other',
    name: 'luxuryServicesOther',
    type: 'text',
    label: 'Please specify other luxury services',
    required: false,
    placeholder: 'Please specify...',
    width: '100'
  },
  tripDetails: {
    id: 'trip-details',
    name: 'tripDetails',
    type: 'textarea',
    label: 'Would you like me to know more details about your dream trip?',
    required: false,
    placeholder: 'Tell us about your dream trip...',
    rows: 4,
    width: '100'
  },
  // Personal Information
  name: {
    id: 'name',
    name: 'name',
    type: 'text',
    label: 'Name & Surname',
    required: true,
    width: '100'
  },
  email: {
    id: 'email',
    name: 'email',
    type: 'email',
    label: 'Email',
    required: true,
    width: '50'
  },
  phone: {
    id: 'phone',
    name: 'phone',
    type: 'tel',
    label: 'Phone (with country code)',
    required: false,
    width: '50'
  },
  address: {
    id: 'address',
    name: 'address',
    type: 'text',
    label: 'Address',
    required: false,
    width: '100'
  },
  city: {
    id: 'city',
    name: 'city',
    type: 'text',
    label: 'City',
    required: false,
    width: '50'
  },
  postalCode: {
    id: 'postal-code',
    name: 'postalCode',
    type: 'text',
    label: 'Postal Code',
    required: false,
    width: '50'
  },
  countryOfResidence: {
    id: 'country-of-residence',
    name: 'countryOfResidence',
    type: 'select',
    label: 'Country of Residence',
    required: false,
    choices: countriesOfResidence,
    width: '50'
  },
  travelingWith: {
    id: 'traveling-with',
    name: 'travelingWith',
    type: 'select',
    label: 'Who will be traveling with you?',
    required: false,
    choices: travelingWith,
    width: '50'
  },
  kidsAge: {
    id: 'kids-age',
    name: 'kidsAge',
    type: 'text',
    label: 'Kids age (if applicable)',
    required: false,
    placeholder: 'e.g., 5, 8, 12',
    width: '50'
  },
  howDidYouHear: {
    id: 'how-did-you-hear',
    name: 'howDidYouHear',
    type: 'select',
    label: 'How did you hear about Travel with Gaston?',
    required: false,
    choices: howDidYouHear,
    width: '50'
  },
  newsletter: {
    id: 'newsletter',
    name: 'newsletter',
    type: 'checkbox',
    label: 'I\'d like to receive exclusive travel offers & news from Travel with Gaston.',
    required: false,
    width: '100'
  },
  privacy: {
    id: 'privacy',
    name: 'privacy',
    type: 'checkbox',
    label: 'I have read and accept the Privacy Policy and data protection.',
    required: true,
    width: '100'
  }
};
---
<div class="w-full bg-primary-lighter py-8">
  <div class="max-w-6xl mx-auto px-4">
    <form id="custom-journeys-form" class="space-y-8">
      <!-- Campo oculto para identificar el formulario -->
      <input type="hidden" name="form_id" value="custom_journeys">
      <div>
        <h2 class="text-lg font-semibold text-gray-800 mb-4 uppercase tracking-wide">About the Trip</h2>
        
        <!-- Destination Selection -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <FormField field={formFields.destination} />
          <FormField field={formFields.specificCountry} />
        </div>

        <!-- Secondary Destination -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <FormField field={formFields.secondaryDestination} />
          <FormField field={formFields.secondarySpecificCountry} />
        </div>
  
        <!-- Trip Type Selection -->
        <div class="mb-6">
          <FormField field={formFields.tripType} />
        </div>

        <!-- Holiday Experience Selection -->
        <div class="mb-6">
          <FormField field={formFields.holidayExperience} />
        </div>
  
        <!-- Travel Dates -->
        <div class="mb-6">
          <FormField field={formFields.travelDates} />
        </div>
        
        <!-- Specific Dates -->
        <div class="mb-6">
          <label class="block text-sm text-gray-700 mb-2">En caso de que tengas fechas específicas, por favor háznoslo saber aquí</label>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <FormField field={formFields.startDate} />
            <FormField field={formFields.returnDate} />
          </div>
        </div>

        <!-- Nights and Budget -->
        <!-- Nights field in its own row -->
        <div class="mb-6">
          <FormField field={formFields.nights} />
        </div>

        <!-- Budget section in the next row -->
        <div class="mb-6">
          <label class="block text-sm text-gray-700 mb-2">What is your estimated budget per person?</label>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <FormField field={formFields.currency} />
            <FormField field={formFields.budgetAmount} />
          </div>
          <div class="mt-2">
            <FormField field={formFields.budgetDetails} />
          </div>
        </div>

        <!-- Special Occasion -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <FormField field={formFields.specialOccasion} />
          <div></div>
        </div>

        <!-- Luxury Services -->
        <div class="mb-6">
          <FormField field={formFields.luxuryServices} />
          <div class="mt-2" id="luxury-services-other-container" style="display: none;">
            <FormField field={formFields.luxuryServicesOther} />
          </div>
        </div>
  
        <!-- Additional Trip Information -->
        <div class="mb-6">
          <FormField field={formFields.tripDetails} />
        </div>
      </div>
  
      <!-- Personal Information Section -->
      <div>
        <h2 class="text-lg font-semibold text-gray-800 mb-4 uppercase tracking-wide">Personal Information</h2>
        
        <div class="mb-4">
          <FormField field={formFields.name} />
        </div>
  
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          <FormField field={formFields.email} />
          <FormField field={formFields.phone} />
        </div>
  
        <div class="mb-4">
          <FormField field={formFields.address} />
        </div>
  
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          <FormField field={formFields.city} />
          <FormField field={formFields.postalCode} />
        </div>
  
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <FormField field={formFields.countryOfResidence} />
          <FormField field={formFields.travelingWith} />
        </div>

        <!-- Kids Age (conditional) -->
        <div class="mb-6" id="kids-age-container" style="display: none;">
          <FormField field={formFields.kidsAge} />
        </div>

        <!-- How did you hear -->
        <div class="mb-6">
          <FormField field={formFields.howDidYouHear} />
        </div>
  
        <!-- Checkboxes -->
        <div class="space-y-3 mb-6">
          <FormField field={formFields.newsletter} />
          <FormField field={formFields.privacy} />
        </div>
  
        <!-- Submit Button -->
        <button 
          type="button" 
          id="submit-btn"
          class="bg-black text-white px-8 py-3 rounded hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
        >
          Start Planning My Journey
        </button>
      </div>
  
      <!-- Mensaje de estado -->
      <div id="status-message" class="hidden mt-4 p-4 rounded-md"></div>
    </form>
  </div>
</div>

<script>
  // Validación del formulario
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('custom-journeys-form');
    const submitBtn = document.getElementById('submit-btn');
    const statusMessage = document.getElementById('status-message');
    const kidsAgeContainer = document.getElementById('kids-age-container');
    const travelingWithSelect = document.getElementById('traveling-with') as HTMLSelectElement;

    if (!form || !submitBtn || !statusMessage) {
      console.error('Elementos del formulario no encontrados');
      return;
    }

    // Mostrar/ocultar campo de edad de niños
    if (travelingWithSelect && kidsAgeContainer) {
      travelingWithSelect.addEventListener('change', function() {
        if (this.value === 'family-with-kids') {
          kidsAgeContainer.style.display = 'block';
        } else {
          kidsAgeContainer.style.display = 'none';
        }
      });
    }

    // Función para mostrar errores
    function showError(fieldName: string, message: string) {
      const field = document.getElementById(fieldName) as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | null;
      const errorElement = document.getElementById(`${fieldName}-error`);
      
      if (field && errorElement) {
        field.setAttribute('aria-invalid', 'true');
        field.classList.add('border-red-500');
        field.classList.remove('border-gray-300');
        errorElement.textContent = message;
        errorElement.classList.remove('hidden');
      }
    }

    // Función para limpiar errores
    function clearError(fieldName: string) {
      const field = document.getElementById(fieldName) as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | null;
      const errorElement = document.getElementById(`${fieldName}-error`);
      
      if (field && errorElement) {
        field.setAttribute('aria-invalid', 'false');
        field.classList.remove('border-red-500');
        field.classList.add('border-gray-300');
        errorElement.classList.add('hidden');
      }
    }

    // Función para validar email
    function isValidEmail(email: string) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    }

    // Función para validar fechas
    function validateDates() {
      const startDateField = document.getElementById('start-date') as HTMLInputElement | null;
      const returnDateField = document.getElementById('return-date') as HTMLInputElement | null;
      
      if (!startDateField || !returnDateField) return true;
      
      const startDate = startDateField.value;
      const returnDate = returnDateField.value;
      
      if (startDate && returnDate) {
        const start = new Date(startDate);
        const returnDateObj = new Date(returnDate);
        
        if (returnDateObj <= start) {
          showError('return-date', 'La fecha de regreso debe ser posterior a la fecha de salida');
          return false;
        }
      }
      return true;
    }

    // Función para validar campos requeridos
    function validateRequiredFields() {
      const requiredFields = [
        'name', 'email', 'destination'
      ];
      
      let isValid = true;
      
      requiredFields.forEach(fieldName => {
        const field = document.getElementById(fieldName) as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | null;
        if (!field) return;
        
        if (!field.value.trim()) {
          showError(fieldName, 'Este campo es obligatorio');
          isValid = false;
        } else {
          clearError(fieldName);
        }
      });
      
      // Validar checkbox de privacidad
      const privacyCheckbox = document.getElementById('privacy') as HTMLInputElement | null;
      if (privacyCheckbox && !privacyCheckbox.checked) {
        showError('privacy', 'Debes aceptar la política de privacidad');
        isValid = false;
      } else if (privacyCheckbox) {
        clearError('privacy');
      }
      
      return isValid;
    }

    // Función para validar email
    function validateEmail() {
      const emailField = document.getElementById('email') as HTMLInputElement | null;
      if (emailField && emailField.value && !isValidEmail(emailField.value)) {
        showError('email', 'Por favor ingresa un email válido');
        return false;
      }
      return true;
    }

    // Manejo de botones de tipo de viaje
    const tripTypeButtons = document.querySelectorAll('.trip-type-btn');
    let selectedTripTypes: string[] = [];
    
    tripTypeButtons.forEach(button => {
      button.addEventListener('click', function(this: HTMLButtonElement, e) {
        e.preventDefault();
        const value = this.value;
        
        if (this.classList.contains('bg-primary-dark')) {
          // Deseleccionar
          this.classList.remove('bg-primary-dark', 'text-white');
          this.classList.add('bg-white', 'text-gray-700');
          selectedTripTypes = selectedTripTypes.filter(type => type !== value);
        } else {
          // Seleccionar
          this.classList.add('bg-primary-dark', 'text-white');
          this.classList.remove('bg-white', 'text-gray-700');
          selectedTripTypes.push(value);
        }
        
        clearError('trip-type');
      });
    });

    // Manejo de botones de experiencia de vacaciones
    const holidayExperienceButtons = document.querySelectorAll('.holiday-experience-btn');
    let selectedHolidayExperiences: string[] = [];
    
    holidayExperienceButtons.forEach(button => {
      button.addEventListener('click', function(this: HTMLButtonElement, e) {
        e.preventDefault();
        const value = this.value;
        
        if (this.classList.contains('bg-primary-dark')) {
          // Deseleccionar
          this.classList.remove('bg-primary-dark', 'text-white');
          this.classList.add('bg-white', 'text-gray-700');
          selectedHolidayExperiences = selectedHolidayExperiences.filter(type => type !== value);
        } else {
          // Seleccionar
          this.classList.add('bg-primary-dark', 'text-white');
          this.classList.remove('bg-white', 'text-gray-700');
          selectedHolidayExperiences.push(value);
        }
        
        clearError('holiday-experience');
      });
    });

    // Manejo de checkboxes de servicios de lujo
    const luxuryServiceCheckboxes = document.querySelectorAll('input[name="luxuryServices"]');
    const luxuryServicesOtherContainer = document.getElementById('luxury-services-other-container');
    
    luxuryServiceCheckboxes.forEach(checkbox => {
      checkbox.addEventListener('change', function(this: HTMLInputElement) {
        if (this.value === 'other' && this.checked && luxuryServicesOtherContainer) {
          luxuryServicesOtherContainer.style.display = 'block';
        } else if (this.value === 'other' && !this.checked && luxuryServicesOtherContainer) {
          luxuryServicesOtherContainer.style.display = 'none';
          const otherInput = document.getElementById('luxury-services-other') as HTMLInputElement;
          if (otherInput) {
            otherInput.value = '';
          }
        }
      });
    });

    // Event listeners para validación en tiempo real
    const fields = form.querySelectorAll('input, select, textarea');
    fields.forEach(field => {
      field.addEventListener('blur', function(this: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement) {
        const fieldName = this.name || this.id;
        
        // Limpiar error al empezar a escribir
        if (this.value && this.value.trim()) {
          clearError(fieldName);
        }
        
        // Validaciones específicas
        if (fieldName === 'email' && this.value) {
          if (!isValidEmail(this.value)) {
            showError('email', 'Por favor ingresa un email válido');
          }
        }
        
        if (fieldName === 'start-date' || fieldName === 'return-date') {
          validateDates();
        }
      });
    });

    // Función para recopilar datos del formulario
    function collectFormData() {
      const formData: Record<string, any> = {};
      
      if (!form) return formData;
      
      // Recopilar datos de todos los campos del formulario
      const formElements = form.querySelectorAll('input, select, textarea');
      formElements.forEach((element: any) => {
        if (element.type === 'checkbox') {
          // Manejar checkboxes individuales (newsletter, privacy)
          if (element.name === 'newsletter' || element.name === 'privacy') {
            formData[element.name] = element.checked;
          }
          // Manejar checkboxes de servicios de lujo
          else if (element.name === 'luxuryServices') {
            if (!formData.luxuryServices) {
              formData.luxuryServices = [];
            }
            if (element.checked) {
              formData.luxuryServices.push(element.value);
            }
          }
        } else if (element.type === 'button' && (element.classList.contains('trip-type-btn') || element.classList.contains('holiday-experience-btn'))) {
          // Los botones se manejan por separado
          return;
        } else {
          formData[element.name] = element.value;
        }
      });
      
      // Agregar tipos de viaje seleccionados
      const selectedTripTypes: string[] = [];
      const tripTypeButtons = document.querySelectorAll('.trip-type-btn');
      tripTypeButtons.forEach((button: any) => {
        if (button.classList.contains('bg-primary-dark')) {
          selectedTripTypes.push(button.value);
        }
      });
      formData.tripTypes = selectedTripTypes;
      
      // Agregar experiencias de vacaciones seleccionadas
      const selectedHolidayExperiences: string[] = [];
      const holidayExperienceButtons = document.querySelectorAll('.holiday-experience-btn');
      holidayExperienceButtons.forEach((button: any) => {
        if (button.classList.contains('bg-blue-500')) {
          selectedHolidayExperiences.push(button.value);
        }
      });
      formData.holidayExperiences = selectedHolidayExperiences;
      
      return formData;
    }

    // Función para enviar datos al endpoint local
    async function sendToAPI(formData: Record<string, any>) {
      const apiUrl = '/api/send-form';
      
      try {
        const response = await fetch(apiUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(formData)
        });
        
        const result = await response.json();
        console.log('Respuesta de la API:', result);
        
        if (response.ok && result.success) {
          return { success: true, data: result.data, message: result.message };
        } else {
          return { 
            success: false, 
            error: result.error || `Error ${response.status}: ${response.statusText}`,
            details: result.details
          };
        }
      } catch (error) {
        console.error('Error al enviar a la API:', error);
        return { success: false, error: error instanceof Error ? error.message : 'Error desconocido' };
      }
    }

    // Manejo del envío del formulario
    submitBtn.addEventListener('click', async function(e) {
      e.preventDefault();
      
      // Limpiar mensajes previos
      statusMessage.classList.add('hidden');
      
      // Validar formulario
      const isFormValid = validateRequiredFields() && validateEmail() && validateDates();
      
      if (isFormValid) {
        // Recopilar datos del formulario
        const formData = collectFormData();
        
        // Mostrar datos en consola
        console.log('=== DATOS DEL FORMULARIO ===');
        console.log('Formulario válido:', isFormValid);
        console.log('Datos recopilados:', formData);
        console.log('============================');
        
        // Deshabilitar botón durante el envío
        (submitBtn as HTMLButtonElement).disabled = true;
        (submitBtn as HTMLButtonElement).textContent = 'Enviando...';
        
        try {
          // Enviar a la API local
          const result = await sendToAPI(formData);
          
          if (result.success) {
            // Éxito
            statusMessage.textContent = result.message || '¡Formulario enviado correctamente! Te contactaremos pronto.';
            statusMessage.className = 'mt-4 p-4 rounded-md bg-green-100 text-green-800 border border-green-200';
            statusMessage.classList.remove('hidden');
            
            // Limpiar formulario
            // TODO: (form as HTMLFormElement).reset();
            
            // Limpiar selecciones de botones
            /* TODO:
            const allButtons = document.querySelectorAll('.trip-type-btn, .holiday-experience-btn');
            allButtons.forEach((button: any) => {
              button.classList.remove('bg-blue-500', 'text-white');
              button.classList.add('bg-white', 'text-gray-700');
            });
            */
          } else {
            // Error de la API
            const errorDetails = result.details ? ` (${result.details.join(', ')})` : '';
            statusMessage.textContent = `Error al enviar el formulario: ${result.error}${errorDetails}`;
            statusMessage.className = 'mt-4 p-4 rounded-md bg-red-100 text-red-800 border border-red-200';
            statusMessage.classList.remove('hidden');
          }
        } catch (error) {
          // Error de red
          statusMessage.textContent = 'Error de conexión. Por favor, inténtalo de nuevo.';
          statusMessage.className = 'mt-4 p-4 rounded-md bg-red-100 text-red-800 border border-red-200';
          statusMessage.classList.remove('hidden');
        } finally {
          // Rehabilitar botón
          (submitBtn as HTMLButtonElement).disabled = false;
          (submitBtn as HTMLButtonElement).textContent = 'Start Planning My Journey';
        }
        
        // Scroll al mensaje
        statusMessage.scrollIntoView({ behavior: 'smooth' });
      } else {
        // Mostrar mensaje de error de validación
        statusMessage.textContent = 'Por favor corrige los errores antes de enviar.';
        statusMessage.className = 'mt-4 p-4 rounded-md bg-red-100 text-red-800 border border-red-200';
        statusMessage.classList.remove('hidden');
      }
    });
  });
</script>

<style>
  /* Estilos adicionales para mejorar la accesibilidad */
  .form-field input:focus,
  .form-field select:focus,
  .form-field textarea:focus {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }

  input[aria-invalid="true"],
  select[aria-invalid="true"],
  textarea[aria-invalid="true"] {
    border-color: #ef4444;
    box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
  }

  /* Estilos para checkboxes */
  input[type="checkbox"] {
    accent-color: #3b82f6;
  }

  /* Hover states para mejor UX */
  button:hover:not(:disabled) {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  button:active:not(:disabled) {
    transform: translateY(0);
  }

  /* Estilos para botón deshabilitado */
  button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
  }

  /* Estilos para botones de selección múltiple */
  .trip-type-btn,
  .holiday-experience-btn {
    transition: all 0.2s ease;
  }

  .trip-type-btn:hover,
  .holiday-experience-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  /* Estilos para checkboxes de servicios de lujo */
  .luxury-services-checkbox {
    margin-bottom: 0.5rem;
  }

  .luxury-services-checkbox input[type="checkbox"] {
    margin-right: 0.5rem;
  }

  .luxury-services-checkbox label {
    font-size: 0.875rem;
    color: #374151;
    cursor: pointer;
  }
</style>
