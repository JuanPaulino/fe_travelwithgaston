---
// Props que recibe el componente
const { data } = Astro.props;

// Extraer los datos del bloque
const title = data?.headline || "Gaston's picks";
const description = data?.tagline || "Yorem ipsum dolor sit amet, consectetur adipiscing elit.";
const items = data?.items || [];

// Construir la URL de Directus para las imágenes
const DIRECTUS_URL = import.meta.env.DIRECTUS_URL;

// Procesar los items para extraer solo los datos necesarios
const hotelItems = items.map((item: any) => ({
  id: item.id,
  hotelName: item.hotel_name,
  location: item.location,
  description: item.description,
  image: item.image?.id ? `${DIRECTUS_URL}/assets/${item.image.id}` : null,
  link: item.link,
}));
---

<section class="featured-hotels-section py-4 px-4">
  <div class="max-w-7xl mx-auto">
    <!-- Header con título y controles -->
    <div class="flex flex-col sm:flex-row sm:justify-between sm:items-start mb-6 sm:mb-8">
      <div class="flex-1 mb-4 sm:mb-0">
        <h2 class="text-black font-bold text-2xl sm:text-3xl mb-2">
          {title}
        </h2>
        <p class="text-gray-600 text-base sm:text-lg">
          {description}
        </p>
      </div>
      
      <!-- Controles de navegación -->
      <div class="flex gap-2 justify-center sm:justify-end">
        <button 
          class="hotel-nav-btn prev-btn w-10 h-10 sm:w-12 sm:h-12 rounded-full border border-gray-300 flex items-center justify-center hover:bg-gray-100 transition-colors"
          aria-label="Previous hotels"
        >
          <svg class="w-4 h-4 sm:w-5 sm:h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
          </svg>
        </button>
        <button 
          class="hotel-nav-btn next-btn w-10 h-10 sm:w-12 sm:h-12 rounded-full border border-gray-300 flex items-center justify-center hover:bg-gray-100 transition-colors"
          aria-label="Next hotels"
        >
          <svg class="w-4 h-4 sm:w-5 sm:h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Contenedor de hoteles con scroll horizontal -->
    <div class="hotels-container relative">
      <div class="hotels-scroll flex gap-4 md:gap-6 overflow-x-auto pb-4 scrollbar-hide">
        {hotelItems.map((hotel: any) => (
          <a 
            href={hotel.link || '#'} 
            class="hotel-card flex-shrink-0 w-[280px] h-[400px] md:w-[900px] md:h-[500px] block cursor-pointer"
            target={hotel.link ? "_blank" : undefined}
            rel={hotel.link ? "noopener noreferrer" : undefined}
          >
            <div class="relative w-full h-full overflow-hidden rounded-xl md:rounded-none">
              {hotel.image ? (
                <img
                  src={hotel.image}
                  alt={hotel.hotelName}
                  class="w-full h-full object-cover"
                />
              ) : (
                <div class="w-full h-full bg-gray-200 flex items-center justify-center">
                  <span class="text-gray-500">No image</span>
                </div>
              )}
              
              <!-- Overlay con gradiente -->
              <div class="image-overlay absolute inset-0 rounded-xl md:rounded-none"></div>
              
              <!-- Overlay flotante con efecto glass blur -->
              <div class="glass-overlay absolute bottom-3 left-3 right-3 md:bottom-6 md:left-6 md:right-auto md:max-w-md rounded-lg p-4 md:p-6 shadow-lg">
                <h3 class="text-white font-bold text-lg mb-1 md:text-xl">
                  {hotel.hotelName}
                </h3>
                <p class="text-white text-xs mb-2 md:text-sm md:mb-3">
                  {hotel.location}
                </p>
                <p class="text-white text-xs leading-relaxed line-clamp-2 md:text-sm md:line-clamp-3">
                  {hotel.description}
                </p>
              </div>
            </div>
          </a>
        ))}
      </div>
    </div>
  </div>
</section>

<style>
  .featured-hotels-section {
  
  }
  
  .hotel-card {
    transition: transform 0.3s ease;
    text-decoration: none;
    color: inherit;
  }
  
  .hotel-card:hover {
    transform: translateY(-4px);
    text-decoration: none;
    color: inherit;
  }
  
  .hotel-card:focus {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }
  
  /* Ocultar scrollbar pero mantener funcionalidad */
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
  
  /* Línea de texto truncada */
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  /* Overlay con gradiente sobre la imagen */
  .image-overlay {
    border-radius: 0 0 2px 2px;
    background: linear-gradient(180deg, rgba(0, 0, 0, 0.00) 0%, rgba(0, 0, 0, 0.40) 100%);
  }
  
  /* Efecto glass blur mejorado */
  .glass-overlay {
    background: rgba(255, 255, 255, 0.30);
    border-radius: 16px;
    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(12px);
    -webkit-backdrop-filter: blur(12px);
    border: 1px solid rgba(255, 255, 255, 0.30);
  }
  
  /* Responsive para móvil */
  @media (max-width: 768px) {
    .featured-hotels-section {
      padding-left: 0.75rem;
      padding-right: 0.75rem;
    }
    
    .hotel-card {
      width: 260px !important;
      height: 380px !important;
      margin-left: 0;
      margin-right: 0;
    }
    
    .glass-overlay {
      left: 0.75rem !important;
      right: 0.75rem !important;
      bottom: 0.75rem !important;
      max-width: none !important;
      border-radius: 8px;
      padding: 0.875rem !important;
    }
    
    .hotels-scroll {
      gap: 0.75rem;
      padding-left: 0;
      padding-right: 0;
    }
    
    /* Ajustar el primer y último elemento para mejor scroll */
    .hotels-scroll::before {
      content: '';
      flex-shrink: 0;
      width: 0;
    }
    
    .hotels-scroll::after {
      content: '';
      flex-shrink: 0;
      width: 0.75rem;
    }
    
    /* Mejorar la visibilidad de los botones de navegación en móvil */
    .hotel-nav-btn {
      background: rgba(255, 255, 255, 0.9);
      backdrop-filter: blur(10px);
      border: 1px solid rgba(0, 0, 0, 0.1);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }
    
    .hotel-nav-btn:hover {
      background: rgba(255, 255, 255, 1);
      transform: scale(1.05);
    }
    
    /* Mejorar el scroll en móviles */
    .hotels-scroll {
      -webkit-overflow-scrolling: touch;
      scroll-behavior: smooth;
    }
    
    /* Asegurar que las tarjetas no se compriman */
    .hotel-card {
      flex-shrink: 0;
    }
    
    /* Mejorar el espaciado del contenedor principal */
    .hotels-container {
      margin-left: -0.75rem;
      margin-right: -0.75rem;
      padding-left: 0.75rem;
      padding-right: 0.75rem;
    }
  }
  
  /* Responsive para pantallas muy pequeñas (320px) */
  @media (max-width: 375px) {
    .featured-hotels-section {
      padding-left: 0.5rem;
      padding-right: 0.5rem;
    }
    
    .hotel-card {
      width: 240px !important;
      height: 360px !important;
    }
    
    .glass-overlay {
      left: 0.5rem !important;
      right: 0.5rem !important;
      bottom: 0.5rem !important;
      padding: 0.75rem !important;
    }
    
    .hotels-scroll {
      gap: 0.5rem;
    }
    
    .hotels-scroll::after {
      width: 0.5rem;
    }
    
    .hotels-container {
      margin-left: -0.5rem;
      margin-right: -0.5rem;
      padding-left: 0.5rem;
      padding-right: 0.5rem;
    }
    
    /* Ajustar el header para pantallas muy pequeñas */
    .featured-hotels-section h2 {
      font-size: 1.5rem !important;
    }
    
    .featured-hotels-section p {
      font-size: 0.875rem !important;
    }
  }
</style>

<script>
  // Funcionalidad de navegación con botones
  document.addEventListener('DOMContentLoaded', function() {
    const scrollContainer = document.querySelector('.hotels-scroll');
    const prevBtn = document.querySelector('.prev-btn');
    const nextBtn = document.querySelector('.next-btn');
    
    if (!scrollContainer || !prevBtn || !nextBtn) return;
    
    // Función para obtener el ancho de scroll basado en el tamaño de pantalla
    function getScrollAmount() {
      const width = window.innerWidth;
      if (width <= 375) {
        // Pantallas muy pequeñas: ancho de tarjeta (240px) + gap (8px) = 248px
        return 248;
      } else if (width <= 768) {
        // Móvil normal: ancho de tarjeta (260px) + gap (12px) = 272px
        return 272;
      } else {
        // Desktop: ancho de tarjeta (900px) + gap (24px) = 924px
        return 924;
      }
    }
    
    // Función para actualizar la visibilidad de los botones
    function updateButtonVisibility() {
      if (!scrollContainer || !prevBtn || !nextBtn) return;
      
      // Con navegación circular, los botones siempre están disponibles
      (prevBtn as HTMLElement).style.opacity = '1';
      (nextBtn as HTMLElement).style.opacity = '1';
    }
    
    // Función para navegar al siguiente elemento con loop
    function scrollToNext() {
      const scrollAmount = getScrollAmount();
      const currentScroll = scrollContainer.scrollLeft;
      const maxScroll = scrollContainer.scrollWidth - scrollContainer.clientWidth;
      
      // Si estamos cerca del final, volver al inicio
      if (currentScroll >= maxScroll - 10) {
        scrollContainer.scrollTo({
          left: 0,
          behavior: 'smooth'
        });
      } else {
        scrollContainer.scrollBy({
          left: scrollAmount,
          behavior: 'smooth'
        });
      }
    }
    
    // Función para navegar al elemento anterior con loop
    function scrollToPrev() {
      const scrollAmount = getScrollAmount();
      const currentScroll = scrollContainer.scrollLeft;
      
      // Si estamos cerca del inicio, ir al final
      if (currentScroll <= 10) {
        scrollContainer.scrollTo({
          left: scrollContainer.scrollWidth - scrollContainer.clientWidth,
          behavior: 'smooth'
        });
      } else {
        scrollContainer.scrollBy({
          left: -scrollAmount,
          behavior: 'smooth'
        });
      }
    }
    
    prevBtn.addEventListener('click', scrollToPrev);
    nextBtn.addEventListener('click', scrollToNext);
    
    // Auto-scroll con loop
    setInterval(scrollToNext, 5000);
    // Actualizar visibilidad de botones al hacer scroll
    scrollContainer?.addEventListener('scroll', updateButtonVisibility);
    
    // Actualizar visibilidad de botones al redimensionar la ventana
    window.addEventListener('resize', () => {
      updateButtonVisibility();
    });
    
    // Inicializar visibilidad de botones
    updateButtonVisibility();
  });
</script> 