---
import HeroSection from './HeroSection.astro';
import InspirationGrid from './InspirationGrid.astro';
import FeaturedHotels from './FeaturedHotels.astro';
import RichText from './RichText.astro';
import FormBlock from './FormBlock.jsx';

export interface Props {
  blocks: any[];
}

const { blocks } = Astro.props;
---

<div class="dynamic-blocks">
  {blocks.map((block: any, index: number) => {
    // Hero Section
    if (block.collection === 'block_hero' || block.collection === 'hero_section') {
      return <HeroSection data={block.item} />;
    }
    
    // Inspiration Grid
    if (block.collection === 'block_inspiration_grid' || block.collection === 'inspiration_grid') {
      return <InspirationGrid data={block.item} />;
    }
    
    // Featured Hotels
    if (block.collection === 'block_featured_hotels') {
      return <FeaturedHotels data={block.item} />;
    }
    
    // Form Block
    if (block.collection === 'block_form') {
      return <FormBlock data={block.item} background={block.background} />;
    }
    
    // Content Block / Rich Text
    if (block.collection === 'content_block' || block.collection === 'block_content') {
      return (
        <div class="bg-white p-6 rounded-lg shadow-md mb-8">
          <h3 class="text-3xl font-semibold mb-4">
            {block.item?.title || 'Bloque de Contenido'}
          </h3>
          {block.item?.content && (
            <div class="prose" set:html={block.item.content} />
          )}
        </div>
      );
    }
    
    // Hero Section (fallback para el formato anterior)
    if (block.collection === 'hero_section') {
      return (
        <div class="bg-gradient-to-r from-blue-500 to-purple-600 text-white p-8 rounded-lg mb-8">
          <h2 class="text-3xl font-bold mb-4">
            {block.item?.title || 'Sección Hero'}
          </h2>
          {block.item?.description && (
            <p class="text-xl">{block.item.description}</p>
          )}
        </div>
      );
    }
    
    // Inspiration Grid (fallback para el formato anterior)
    if (block.collection === 'inspiration_grid') {
      return (
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
          {block.item?.items?.map((item: any, itemIndex: number) => (
            <div class="bg-white rounded-lg shadow-md overflow-hidden">
              {item.image && (
                <img 
                  src={`${import.meta.env.DIRECTUS_URL}/assets/${item.image.id}`}
                  alt={item.title || 'Imagen de inspiración'}
                  class="w-full h-48 object-cover"
                />
              )}
              <div class="p-4">
                <h4 class="text-lg font-semibold mb-2">
                  {item.title || 'Elemento de inspiración'}
                </h4>
                {item.description && (
                  <p class="text-gray-600">{item.description}</p>
                )}
              </div>
            </div>
          ))}
        </div>
      );
    }
    
    // Fallback para bloques no reconocidos
    return (
      <div class="unknown-block p-4 bg-gray-100 border border-gray-300 rounded-lg mb-8">
        <p class="text-gray-700 font-medium">Bloque no reconocido: {block.collection}</p>
        {import.meta.env.DEV && (
          <pre class="text-xs mt-2 text-gray-500 overflow-auto">{JSON.stringify(block, null, 2)}</pre>
        )}
      </div>
    );
  })}
</div>

<style>
  .dynamic-blocks {
    width: 100%;
  }
  
  .unknown-block {
    padding: 2rem;
    background: #f5f5f5;
    border: 1px solid #ddd;
    margin: 1rem 0;
  }
</style> 