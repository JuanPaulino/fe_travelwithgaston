---
// TripInquiryForm.astro - Formulario de consulta de viajes
import { destinations, budgetRanges, groupSizes, accommodationTypes, interests, travelStyles, tripTypes, dateOptions, nightOptions, currencyOptions, budgetAmounts, weddingOptions, registryOptions } from '../data/destinations.js';
import FormField from './form/FormField.astro';

// Definición de campos del formulario
const formFields = {
  // About the Trip
  destination: {
    id: 'destination',
    name: 'destination',
    type: 'select',
    label: 'Which destination would you like to explore on your next trip?',
    required: true,
    choices: destinations,
    width: '50'
  },
  secondaryDestination: {
    id: 'secondary-destination',
    name: 'secondaryDestination',
    type: 'select',
    label: 'What other destination would you like to visit?',
    required: false,
    choices: destinations,
    width: '50'
  },
  tripType: {
    id: 'trip-type',
    name: 'tripType',
    type: 'button_group',
    label: 'What kind of trip would you like to do? You can choose from several options',
    required: false,
    choices: tripTypes,
    width: '100'
  },
  travelDates: {
    id: 'travel-dates',
    name: 'travelDates',
    type: 'select',
    label: 'Do you have specific travel dates in mind?',
    required: false,
    choices: dateOptions,
    width: '50'
  },
  startDate: {
    id: 'start-date',
    name: 'startDate',
    type: 'date',
    label: 'Start Date',
    required: false,
    width: '50'
  },
  returnDate: {
    id: 'return-date',
    name: 'returnDate',
    type: 'date',
    label: 'Return Date',
    required: false,
    width: '50'
  },
  weddingDay: {
    id: 'wedding-day',
    name: 'weddingDay',
    type: 'select',
    label: 'When is your wedding day?',
    required: false,
    choices: weddingOptions,
    width: '50'
  },
  currency: {
    id: 'currency',
    name: 'currency',
    type: 'select',
    label: 'Currency',
    required: false,
    choices: currencyOptions,
    width: '50'
  },
  budgetAmount: {
    id: 'budget-amount',
    name: 'budgetAmount',
    type: 'select',
    label: 'Budget Amount',
    required: false,
    choices: budgetAmounts,
    width: '50'
  },
  nights: {
    id: 'nights',
    name: 'nights',
    type: 'select',
    label: 'How many nights does the trip last?',
    required: false,
    choices: nightOptions,
    width: '50'
  },
  registry: {
    id: 'registry',
    name: 'registry',
    type: 'select',
    label: 'Do you plan to create your wedding registry with us?',
    required: false,
    choices: registryOptions,
    width: '50'
  },
  tripDetails: {
    id: 'trip-details',
    name: 'tripDetails',
    type: 'textarea',
    label: 'Would you like to tell us more about your trip?',
    required: false,
    placeholder: 'Write your message here...',
    rows: 3,
    width: '100'
  },
  // Personal Information
  name: {
    id: 'name',
    name: 'name',
    type: 'text',
    label: 'Name',
    required: true,
    width: '50'
  },
  surname: {
    id: 'surname',
    name: 'surname',
    type: 'text',
    label: 'Surname',
    required: true,
    width: '50'
  },
  email: {
    id: 'email',
    name: 'email',
    type: 'email',
    label: 'Email',
    required: true,
    width: '50'
  },
  phone: {
    id: 'phone',
    name: 'phone',
    type: 'tel',
    label: 'Phone',
    required: false,
    width: '50'
  },
  address: {
    id: 'address',
    name: 'address',
    type: 'text',
    label: 'Address',
    required: false,
    width: '100'
  },
  city: {
    id: 'city',
    name: 'city',
    type: 'text',
    label: 'City',
    required: true,
    width: '100'
  },
  zip: {
    id: 'zip',
    name: 'zip',
    type: 'text',
    label: 'Zip/Postal Code',
    required: false,
    width: '100'
  },
  country: {
    id: 'country',
    name: 'country',
    type: 'text',
    label: 'Country',
    required: true,
    width: '100'
  },
  additionalInfo: {
    id: 'additional-info',
    name: 'additionalInfo',
    type: 'textarea',
    label: 'Would you like to tell us more about your trip?',
    required: false,
    placeholder: 'Write your message here...',
    rows: 3,
    width: '100'
  },
  newsletter: {
    id: 'newsletter',
    name: 'newsletter',
    type: 'checkbox',
    label: 'I want to keep up with all the latest travel news and I know that I can unsubscribe at any time.',
    required: false,
    width: '100'
  },
  privacy: {
    id: 'privacy',
    name: 'privacy',
    type: 'checkbox',
    label: 'I have read and accept the Privacy Policy and data protection.',
    required: true,
    width: '100'
  }
};
---
<div class="w-full bg-primary-lighter py-8">
  <div class="max-w-6xl mx-auto px-4">
    <form id="trip-inquiry-form" class="space-y-8">
      <div>
        <h2 class="text-lg font-semibold text-gray-800 mb-4 uppercase tracking-wide">About the Trip</h2>
        
        <!-- Destination Selection -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <FormField field={formFields.destination} />
          <FormField field={formFields.secondaryDestination} />
        </div>
  
        <!-- Trip Type Selection -->
        <div class="mb-6">
          <FormField field={formFields.tripType} />
        </div>
  
        <!-- Travel Details -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <FormField field={formFields.travelDates} />
          <div>
            <label class="block text-sm text-gray-700 mb-2">In case you know dates, please let us know here</label>
            <div class="grid grid-cols-2 gap-2">
              <FormField field={formFields.startDate} />
              <FormField field={formFields.returnDate} />
            </div>
          </div>
        </div>
  
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <FormField field={formFields.weddingDay} />
          <div>
            <label class="block text-sm text-gray-700 mb-2">What is the estimated budget per person for the trip?</label>
            <div class="grid grid-cols-2 gap-2">
              <FormField field={formFields.currency} />
              <FormField field={formFields.budgetAmount} />
            </div>
          </div>
        </div>
  
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <FormField field={formFields.nights} />
          <FormField field={formFields.registry} />
        </div>
  
        <!-- Additional Trip Information -->
        <div class="mb-6">
          <FormField field={formFields.tripDetails} />
        </div>
      </div>
  
      <!-- Personal Information Section -->
      <div>
        <h2 class="text-lg font-semibold text-gray-800 mb-4 uppercase tracking-wide">Personal Information</h2>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          <FormField field={formFields.name} />
          <FormField field={formFields.surname} />
        </div>
  
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          <FormField field={formFields.email} />
          <FormField field={formFields.phone} />
        </div>
  
        <div class="mb-4">
          <FormField field={formFields.address} />
        </div>
  
        <div class="mb-4">
          <FormField field={formFields.city} />
        </div>
  
        <div class="mb-4">
          <FormField field={formFields.zip} />
        </div>
  
        <div class="mb-6">
          <FormField field={formFields.country} />
        </div>
  
        <!-- Additional Information -->
        <div class="mb-6">
          <FormField field={formFields.additionalInfo} />
        </div>
  
        <!-- Checkboxes -->
        <div class="space-y-3 mb-6">
          <FormField field={formFields.newsletter} />
          <FormField field={formFields.privacy} />
        </div>
  
        <!-- Submit Button -->
        <button 
          type="button" 
          id="submit-btn"
          class="bg-black text-white px-8 py-3 rounded hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
        >
          Send
        </button>
      </div>
  
      <!-- Mensaje de estado -->
      <div id="status-message" class="hidden mt-4 p-4 rounded-md"></div>
    </form>
  </div>
</div>

<script>
  // Validación del formulario
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('trip-inquiry-form');
    const submitBtn = document.getElementById('submit-btn');
    const statusMessage = document.getElementById('status-message');

    if (!form || !submitBtn || !statusMessage) {
      console.error('Form elements not found');
      return;
    }

    // Function to show errors
    function showError(fieldName: string, message: string) {
      const field = document.getElementById(fieldName) as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | null;
      const errorElement = document.getElementById(`${fieldName}-error`);
      
      if (field && errorElement) {
        field.setAttribute('aria-invalid', 'true');
        field.classList.add('border-red-500');
        field.classList.remove('border-gray-300');
        errorElement.textContent = message;
        errorElement.classList.remove('hidden');
      }
    }

    // Function to clear errors
    function clearError(fieldName: string) {
      const field = document.getElementById(fieldName) as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | null;
      const errorElement = document.getElementById(`${fieldName}-error`);
      
      if (field && errorElement) {
        field.setAttribute('aria-invalid', 'false');
        field.classList.remove('border-red-500');
        field.classList.add('border-gray-300');
        errorElement.classList.add('hidden');
      }
    }

    // Function to validate email
    function isValidEmail(email: string) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    }

    // Function to validate dates
    function validateDates() {
      const startDateField = document.getElementById('start-date') as HTMLInputElement | null;
      const returnDateField = document.getElementById('return-date') as HTMLInputElement | null;
      
      if (!startDateField || !returnDateField) return true;
      
      const startDate = startDateField.value;
      const returnDate = returnDateField.value;
      
      if (startDate && returnDate) {
        const start = new Date(startDate);
        const returnDateObj = new Date(returnDate);
        
        if (returnDateObj <= start) {
          showError('return-date', 'Return date must be after start date');
          return false;
        }
      }
      return true;
    }

    // Function to validate required fields
    function validateRequiredFields() {
      const requiredFields = [
        'name', 'surname', 'email', 'city', 'country', 'destination'
      ];
      
      let isValid = true;
      
      requiredFields.forEach(fieldName => {
        const field = document.getElementById(fieldName) as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | null;
        if (!field) return;
        
        if (!field.value.trim()) {
          showError(fieldName, 'This field is required');
          isValid = false;
        } else {
          clearError(fieldName);
        }
      });
      
      // Validate privacy checkbox
      const privacyCheckbox = document.getElementById('privacy') as HTMLInputElement | null;
      if (privacyCheckbox && !privacyCheckbox.checked) {
        showError('privacy', 'You must accept the privacy policy');
        isValid = false;
      } else if (privacyCheckbox) {
        clearError('privacy');
      }
      
      return isValid;
    }

    // Function to validate email
    function validateEmail() {
      const emailField = document.getElementById('email') as HTMLInputElement | null;
      if (emailField && emailField.value && !isValidEmail(emailField.value)) {
        showError('email', 'Please enter a valid email');
        return false;
      }
      return true;
    }

    // Handle trip type buttons
    const tripTypeButtons = document.querySelectorAll('.trip-type-btn');
    let selectedTripTypes: string[] = [];
    
    tripTypeButtons.forEach(button => {
      button.addEventListener('click', function(this: HTMLButtonElement, e) {
        e.preventDefault();
        const value = this.value;
        
        if (this.classList.contains('bg-primary-dark')) {
          // Deselect
          this.classList.remove('bg-primary-dark', 'text-white');
          this.classList.add('bg-white', 'text-gray-700');
          selectedTripTypes = selectedTripTypes.filter(type => type !== value);
        } else {
          // Select
          this.classList.add('bg-primary-dark', 'text-white');
          this.classList.remove('bg-white', 'text-gray-700');
          selectedTripTypes.push(value);
        }
        
        clearError('trip-type');
      });
    });

    // Event listeners for real-time validation
    const fields = form.querySelectorAll('input, select, textarea');
    fields.forEach(field => {
      field.addEventListener('blur', function(this: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement) {
        const fieldName = this.name || this.id;
        
        // Clear error when starting to type
        if (this.value && this.value.trim()) {
          clearError(fieldName);
        }
        
        // Specific validations
        if (fieldName === 'email' && this.value) {
          if (!isValidEmail(this.value)) {
            showError('email', 'Please enter a valid email');
          }
        }
        
        if (fieldName === 'start-date' || fieldName === 'return-date') {
          validateDates();
        }
      });
    });

    // Function to collect form data
    function collectFormData() {
      const formData: Record<string, any> = {};
      
      if (!form) return formData;
      
      // Collect data from all form fields
      const formElements = form.querySelectorAll('input, select, textarea');
      formElements.forEach((element: any) => {
        if (element.type === 'checkbox') {
          formData[element.name] = element.checked;
        } else if (element.type === 'button' && element.classList.contains('trip-type-btn')) {
          // Trip type buttons are handled separately
          return;
        } else {
          formData[element.name] = element.value;
        }
      });
      
      // Add selected trip types
      const selectedTripTypes: string[] = [];
      const tripTypeButtons = document.querySelectorAll('.trip-type-btn');
      tripTypeButtons.forEach((button: any) => {
        if (button.classList.contains('bg-primary-dark')) {
          selectedTripTypes.push(button.value);
        }
      });
      formData.tripTypes = selectedTripTypes;
      
      return formData;
    }

    // Function to send data to local endpoint
    async function sendToAPI(formData: Record<string, any>) {
      const apiUrl = '/api/trip-inquiry';
      
      try {
        const response = await fetch(apiUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(formData)
        });
        
        const result = await response.json();
        console.log('API response:', result);
        
        if (response.ok && result.success) {
          return { success: true, data: result.data, message: result.message };
        } else {
          return { 
            success: false, 
            error: result.error || `Error ${response.status}: ${response.statusText}`,
            details: result.details
          };
        }
      } catch (error) {
        console.error('Error sending to API:', error);
        return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
      }
    }

    // Handle form submission
    submitBtn.addEventListener('click', async function(e) {
      e.preventDefault();
      
      // Clear previous messages
      statusMessage.classList.add('hidden');
      
      // Validate form
      const isFormValid = validateRequiredFields() && validateEmail() && validateDates();
      
      if (isFormValid) {
        // Collect form data
        const formData = collectFormData();
        
        // Show data in console
        console.log('=== FORM DATA ===');
        console.log('Form valid:', isFormValid);
        console.log('Collected data:', formData);
        console.log('================');
        
        // Disable button during submission
        (submitBtn as HTMLButtonElement).disabled = true;
        (submitBtn as HTMLButtonElement).textContent = 'Sending...';
        
        try {
          // Send to local API
          const result = await sendToAPI(formData);
          
          if (result.success) {
            // Success
            statusMessage.textContent = result.message || 'Form submitted successfully! We will contact you soon.';
            statusMessage.className = 'mt-4 p-4 rounded-md bg-green-100 text-green-800 border border-green-200';
            statusMessage.classList.remove('hidden');
            
            // Clear form
            // TODO: (form as HTMLFormElement).reset();
            
            // Clear trip type button selections
            /* TODO:
            const tripTypeButtons = document.querySelectorAll('.trip-type-btn');
            tripTypeButtons.forEach((button: any) => {
              button.classList.remove('bg-primary-dark', 'text-white');
              button.classList.add('bg-white', 'text-gray-700');
            });
            */
          } else {
            // API error
            const errorDetails = result.details ? ` (${result.details.join(', ')})` : '';
            statusMessage.textContent = `Error sending form: ${result.error}${errorDetails}`;
            statusMessage.className = 'mt-4 p-4 rounded-md bg-red-100 text-red-800 border border-red-200';
            statusMessage.classList.remove('hidden');
          }
        } catch (error) {
          // Network error
          statusMessage.textContent = 'Connection error. Please try again.';
          statusMessage.className = 'mt-4 p-4 rounded-md bg-red-100 text-red-800 border border-red-200';
          statusMessage.classList.remove('hidden');
        } finally {
          // Re-enable button
          (submitBtn as HTMLButtonElement).disabled = false;
          (submitBtn as HTMLButtonElement).textContent = 'Send';
        }
        
        // Scroll to message
        statusMessage.scrollIntoView({ behavior: 'smooth' });
      } else {
        // Show validation error message
        statusMessage.textContent = 'Please correct the errors before submitting.';
        statusMessage.className = 'mt-4 p-4 rounded-md bg-red-100 text-red-800 border border-red-200';
        statusMessage.classList.remove('hidden');
      }
    });
  });
</script>

<style>
  /* Additional styles to improve accessibility */
  .form-field input:focus,
  .form-field select:focus,
  .form-field textarea:focus {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }

  input[aria-invalid="true"],
  select[aria-invalid="true"],
  textarea[aria-invalid="true"] {
    border-color: #ef4444;
    box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
  }

  /* Styles for checkboxes */
  input[type="checkbox"] {
    accent-color: #3b82f6;
  }

  /* Hover states for better UX */
  button:hover:not(:disabled) {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  button:active:not(:disabled) {
    transform: translateY(0);
  }

  /* Styles for disabled button */
  button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
  }

  /* Styles for trip type buttons */
  .trip-type-btn {
    transition: all 0.2s ease;
  }

  .trip-type-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
</style>