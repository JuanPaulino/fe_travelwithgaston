---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import AuthModalWrapper from '../../components/auth/AuthModalWrapper.jsx';
import StoreDebuggerWrapper from '../../components/StoreDebuggerWrapper.jsx';
import SearchFormWrapper from '../../components/SearchFormWrapper.jsx';
import AvailableHotelRooms from '../../components/AvailableHotelRooms.jsx';
import HotelImageGalleryAuto from '../../components/HotelImageGalleryAuto.astro';
import HotelMap from '../../components/HotelMap.jsx';
import { hotelsApi } from '../../lib/http.js';


// Obtener el ID del hotel de los parámetros de la URL
export async function getStaticPaths() {
  // En modo SSR, no necesitamos generar rutas estáticas
  // Astro manejará las rutas dinámicamente
  return [];
}

// Obtener el ID del hotel de la URL
const { id_hotel } = Astro.params;

// Si no hay ID del hotel, redirigir a la página de búsqueda
if (!id_hotel) {
  return Astro.redirect('/search');
}
console.log(id_hotel);

// Hacer request al endpoint getHotelById
let hotelData = null;
try {
  hotelData = await hotelsApi.getHotelById(id_hotel);
} catch (error) {
  console.error('Error fetching hotel data:', error);
  // Si hay error, redirigir a 404 o usar datos de ejemplo
  return Astro.redirect('/404');
}
console.log(hotelData);

const hotelImages = hotelData.images || [];

// Función para procesar la descripción del hotel
const processHotelDescription = (description: string) => {
  if (!description) return { text: '', shouldShowButton: false, truncatedText: '' };
  let maxWords = 70;
  const wordCount = description.trim().split(/\s+/).length;
  const shouldShowButton = wordCount > maxWords;
  
  if (shouldShowButton) {
    const words = description.trim().split(/\s+/);
    const truncatedText = words.slice(0, maxWords).join(' ');
    return { text: description, shouldShowButton, truncatedText };
  }
  
  return { text: description, shouldShowButton: false, truncatedText: description };
};

const descriptionData = processHotelDescription(hotelData.description);
const uniqueExperiencesData = processHotelDescription(hotelData.unique_experiences as string);

// Función helper para mapear títulos a iconos de Material Symbols
const getIconForTitle = (title: string) => {
  const iconMap: Record<string, string> = {
    'wellness': 'spa',
    'pools': 'pool',
    'dining': 'restaurant',
    'fitness': 'fitness_center',
    'spa': 'spa',
    'gym': 'fitness_center',
    'restaurant': 'restaurant',
    'bar': 'local_bar',
    'concierge': 'concierge',
    'room_service': 'room_service',
    'wifi': 'wifi',
    'parking': 'local_parking',
    'shuttle': 'airport_shuttle',
    'business': 'business_center',
    'meeting': 'meeting_room',
    'conference': 'event',
    'entertainment': 'entertainment',
    'kids': 'child_care',
    'pets': 'pets',
    'accessibility': 'accessibility',
    'security': 'security',
    'cleaning': 'cleaning_services',
    'laundry': 'local_laundry_service',
    'garden': 'park',
    'terrace': 'deck',
    'beach': 'beach_access',
    'mountain': 'landscape',
    'city': 'location_city',
    'resort': 'resort',
    'boutique': 'store',
    'luxury': 'star',
    'historic': 'museum',
    'modern': 'architecture',
    'traditional': 'home',
    'eco': 'eco',
    'sustainable': 'eco',
    'green': 'eco'
  };
  const normalizedTitle: string = title.toLowerCase().trim();
  return iconMap[normalizedTitle] || 'hotel'; // Icono por defecto
};
// Obtener parámetros de la URL para pasarlos al componente
const url = new URL(Astro.request.url);
const searchParams = url.searchParams;

// Construir objeto de datos iniciales desde los parámetros de URL
const initialSearchData = {
  destination: searchParams.get('destination') || '',
  destinationId: searchParams.get('destinationId') || '',
  destinationType: searchParams.get('destinationType') || '',
  destinationLocation: searchParams.get('destinationLocation') || '',
  checkIn: searchParams.get('checkIn') || '',
  checkOut: searchParams.get('checkOut') || '',
  adults: searchParams.get('adults') || '2',
  children: searchParams.get('children') || '0',
  rooms: searchParams.get('rooms') || '1',
  childrenAges: searchParams.get('childrenAges') || ''
};
const title = `Hotel ${hotelData.name}`;
---

<Layout title={title}>
	<Header />
	<!-- Contenido principal -->
	<main class="container mx-auto px-4 py-8">
		<div class="bg-neutral-darkest px-10 py-6 mb-8">
			<SearchFormWrapper client:load initialData={initialSearchData} />
		</div>
		<div class="w-full h-[1px] bg-neutral-lighter mb-8"></div>
		<div class="flex flex-col max-w-7xl mx-auto mb-8">
      {/* Breadcrumbs */}
      <!--
      <nav class="mb-6">
        <ol class="flex items-center space-x-2 text-sm text-neutral-light">
          <li><a href="/" class="hover:text-primary">Home</a></li>
          <li class="text-neutral-lighter">/</li>
          <li><a href="/spain" class="hover:text-primary">Spain</a></li>
          <li class="text-neutral-lighter">/</li>
          <li><a href="/spain/madrid" class="hover:text-primary">Madrid</a></li>
          <li class="text-neutral-lighter">/</li>
          <li class="text-neutral-dark">{hotelData.name}</li>
        </ol>
      </nav>
      -->
      <div class="flex items-center flex-col md:flex-row gap-2 mb-4">
        {hotelData.short_info?.logo && (
          <img src={hotelData.short_info.logo} alt="logo" class="max-h-12 md:max-h-16 object-contain border border-neutral-lighter p-2" />
        )}
        <div class="flex flex-col p-2">
            <h1 class="text-h1 font-heading text-neutral-darkest mb-2 text-center md:text-left">{hotelData.name}</h1>
          <div class="flex items-center gap-2">
            <img src="/images/location.png" alt="locatio -->n" class="w-4 h-4" />
            <p class="text-base text-neutral-DEFAULT m-0">{hotelData.address}</p>
          </div>
        </div>
      </div>
      <div class="mb-4">
        <HotelImageGalleryAuto client:load images={hotelImages} />
      </div>
      <div class="flex flex-col gap-2 mb-8">
        <h2 class="text-h2 font-heading text-neutral-darkest">About this hotel</h2>
        <div class="flex flex-col gap-8">
          <div class="w-full">
            <div class="w-full">
              <p class="text-base text-neutral-DEFAULT m-0 mb-2" id="hotel-description">
                {descriptionData.shouldShowButton ? descriptionData.truncatedText : descriptionData.text}
                {descriptionData.shouldShowButton && '...'}
              </p>
              {descriptionData.shouldShowButton && (
                <button
                  onclick="toggleDescription()"
                  class="text-primary hover:text-primary-dark font-medium text-sm transition-colors duration-200 focus:outline-none focus:underline"
                  id="read-more-btn"
                >
                  Read more
                </button>
              )}
              <div id="full-description" class="hidden">
                <p class="text-base text-neutral-DEFAULT m-0 mb-2">{descriptionData.text}</p>
                <button
                  onclick="toggleDescription()"
                  class="text-primary hover:text-primary-dark font-medium text-sm transition-colors duration-200 focus:outline-none focus:underline"
                  id="read-less-btn"
                >
                  Read less
                </button>
              </div>
            </div>
            <div class="w-full">
              <p class="text-base text-neutral-DEFAULT m-0" id="unique-experiences">
                {uniqueExperiencesData.shouldShowButton ? uniqueExperiencesData.truncatedText : uniqueExperiencesData.text}
                {uniqueExperiencesData.shouldShowButton && '...'}
              </p>
              {uniqueExperiencesData.shouldShowButton && (
                <button
                  onclick="toggleUniqueExperiences()"
                  class="text-primary hover:text-primary-dark font-medium text-sm transition-colors duration-200 focus:outline-none focus:underline"
                  id="read-more-ux-btn"
                >
                  Read more 
                </button>
              )}
              <div id="full-unique-experiences" class="hidden">
                <p class="text-base text-neutral-DEFAULT m-0">{uniqueExperiencesData.text}</p>
                <button
                  onclick="toggleUniqueExperiences()"
                  class="text-primary hover:text-primary-dark font-medium text-sm transition-colors duration-200 focus:outline-none focus:underline"
                  id="read-less-ux-btn"
                >
                  Read less
                </button>
              </div>
            </div>
          </div>
          <div class="flex flex-row w-full flex-wrap gap-4">
             {/* Sostenibilidad */}
             {/*hotelData.sustainability_rating && (
               <div class="">
                 <h4 class="text-sm font-semibold text-neutral-darkest mb-2">Sostenibilidad</h4>
                 <div class="flex items-center gap-1 mb-1">
                   {[...Array(5)].map((_, i) => (
                     <span class={`text-sm ${i < hotelData.sustainability_rating ? 'text-green-500' : 'text-neutral-lighter'}`}>★</span>
                   ))}
                 </div>
                 <span class="text-xs text-neutral-light">{hotelData.sustainability_rating}/5</span>
               </div>
             )*/}
             {/* Check-in */}
             {hotelData.short_info?.check_in_time && (
               <div class="">
                 <h4 class="text-sm font-semibold text-neutral-darkest mb-2">Check-in</h4>
                 <p class="text-sm text-neutral-DEFAULT">{hotelData.short_info.check_in_time}</p>
               </div>
             )}

             {/* Check-out */}
             {hotelData.short_info?.check_out_time && (
               <div class="">
                 <h4 class="text-sm font-semibold text-neutral-darkest mb-2">Check-out</h4>
                 <p class="text-sm text-neutral-DEFAULT">{hotelData.short_info.check_out_time}</p>
               </div>
             )}

             {/* Fecha de apertura */}
             {hotelData.short_info?.opened && (
               <div class="">
                 <h4 class="text-sm font-semibold text-neutral-darkest mb-2">Opened</h4>
                 <p class="text-sm text-neutral-DEFAULT">{hotelData.short_info.opened}</p>
               </div>
             )}

             {/* Número de habitaciones */}
             {hotelData.short_info?.guest_rooms_count && (
               <div class="">
                 <h4 class="text-sm font-semibold text-neutral-darkest mb-2">Rooms</h4>
                 <p class="text-sm text-neutral-DEFAULT">{hotelData.short_info.guest_rooms_count}</p>
               </div>
             )}

             {/* Última renovación */}
             {hotelData.short_info?.last_refurbished && (
               <div class="">
                 <h4 class="text-sm font-semibold text-neutral-darkest mb-2">Renovated</h4>
                 <p class="text-sm text-neutral-DEFAULT">{hotelData.short_info.last_refurbished}</p>
               </div>
             )}

             {/* Iniciativa de sostenibilidad
             {hotelData.sustainability_initiative && (
               <div class=" col-span-2 md:col-span-4">
                 <h4 class="text-sm font-semibold text-neutral-darkest mb-2">Sustainability Initiative</h4>
                 <p class="text-sm text-neutral-DEFAULT">{hotelData.sustainability_initiative}</p>
               </div>
             )}
             */}

              {/* Tipo de hotel */}
              {hotelData.short_info?.type && (
                <div class="">
                  <h4 class="text-sm font-semibold text-neutral-darkest mb-2">Type</h4>
                  <p class="text-sm text-neutral-DEFAULT">{hotelData.short_info.type}</p>
                </div>
              )}

          </div>
        </div>
      </div>
      {Array.isArray(hotelData.hotel_information) && hotelData.hotel_information.length > 0 && (
      <div class="flex flex-col gap-2 mb-8 md:max-w-4xl">
         <h2 class="text-h2 font-heading text-neutral-darkest mb-4">Hotel information</h2>
         <div class="flex flex-col lg:flex-row gap-6 lg:gap-8">
           {hotelData.hotel_information.map((item: any, index: number) => (
             <div class="flex flex-col gap-4 flex-1" id={`hotel-info-${index}`}>
               <div class="flex flex-row items-center gap-2 cursor-pointer" onclick={`toggleAccordion(${index})`}>
                 <div class="w-5 h-5 flex items-center justify-center flex-shrink-0">
                   <span class="material-symbols-outlined text-primary text-xs">{getIconForTitle(item.title)}</span>
                 </div>
                 <p class="text-base font-semibold text-neutral-darkest text-nowrap flex-1">{item.title}</p>
                 <div class="w-5 h-5 flex items-center justify-center flex-shrink-0">
                   <span class="material-symbols-outlined text-primary text-xs transition-transform duration-200" id={`accordion-icon-${index}`}>expand_more</span>
                 </div>
               </div>
               <div class="accordion-content hidden" id={`accordion-content-${index}`}>
                 {item.description.map((description: any, descIndex: number) => (
                   <div class="flex flex-row items-start gap-2 mb-2">
                     <div class="w-4 h-4 flex items-center justify-center flex-shrink-0 mt-0.5">
                       <span class="material-symbols-outlined text-primary text-xs">check</span>
                     </div>
                     <p class="text-base text-neutral-DEFAULT m-0 flex-1 break-words">{description}</p>
                   </div>
                 ))}
               </div>
             </div>
           ))
           }
         </div>
      </div>
      )}
			<AvailableHotelRooms client:load parentHotelData={hotelData} />
      <div class="flex flex-col">
        <HotelMap 
          client:load 
          latitude={hotelData.latitude} 
          longitude={hotelData.longitude} 
          hotelName={hotelData.name}
        />
      </div>
		</div>
	</main>
	<AuthModalWrapper client:load />
	<StoreDebuggerWrapper client:load />
</Layout>

<script>
  function toggleAccordion(index: number) {
    const content = document.getElementById(`accordion-content-${index}`);
    const icon = document.getElementById(`accordion-icon-${index}`);
    
    if (content && icon) {
      if (content.classList.contains('hidden')) {
        content.classList.remove('hidden');
        icon.style.transform = 'rotate(180deg)';
      } else {
        content.classList.add('hidden');
        icon.style.transform = 'rotate(0deg)';
      }
    }
  }

  // Hacer la función globalmente accesible
  (window as any).toggleAccordion = toggleAccordion;

  function toggleDescription() {
    const description = document.getElementById('hotel-description');
    const fullDescription = document.getElementById('full-description');
    const readMoreBtn = document.getElementById('read-more-btn');
    const readLessBtn = document.getElementById('read-less-btn');
    
    if (description && fullDescription && readMoreBtn && readLessBtn) {
      if (fullDescription.classList.contains('hidden')) {
        // Mostrar descripción completa
        description.style.display = 'none';
        fullDescription.classList.remove('hidden');
        readMoreBtn.style.display = 'none';
        readLessBtn.style.display = 'inline';
      } else {
        // Mostrar descripción truncada
        description.style.display = 'block';
        fullDescription.classList.add('hidden');
        readMoreBtn.style.display = 'inline';
        readLessBtn.style.display = 'none';
      }
    }
  }

  // Hacer la función globalmente accesible
  (window as any).toggleDescription = toggleDescription;

  function toggleUniqueExperiences() {
    const ux = document.getElementById('unique-experiences');
    const fullUx = document.getElementById('full-unique-experiences');
    const readMoreUxBtn = document.getElementById('read-more-ux-btn');
    const readLessUxBtn = document.getElementById('read-less-ux-btn');

    if (ux && fullUx && readMoreUxBtn && readLessUxBtn) {
      if (fullUx.classList.contains('hidden')) {
        ux.style.display = 'none';
        fullUx.classList.remove('hidden');
        readMoreUxBtn.style.display = 'none';
        readLessUxBtn.style.display = 'inline';
      } else {
        ux.style.display = 'block';
        fullUx.classList.add('hidden');
        readMoreUxBtn.style.display = 'inline';
        readLessUxBtn.style.display = 'none';
      }
    }
  }

  (window as any).toggleUniqueExperiences = toggleUniqueExperiences;
</script>
